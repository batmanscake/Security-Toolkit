import random
import tkinter as tk
from tkinter import ttk


class SecurityToolkit:
    SYMBOLS = {
           "lowerletters": "abcdefghijklmnopqrstuvwxyz",
           "upperletters": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
           "digits": "123456789",
           "symbols": "!@#$%^&*()_+-=[]{}|;:,.<>?"
        }
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("–ò–ë-–∫–æ–º–±–∞–π–Ω v1.0")
        self.window.geometry("600x400")

        self.tab_control = ttk.Notebook(self.window) #–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫

        self.tab1 = ttk.Frame(self.tab_control)
        self.tab_control.add(self.tab1, text='üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π')

        self.tab_control.pack(expand=1, fill="both")

        self.setup_password_generator_tab()

    def setup_password_generator_tab(self):
        output_frame = tk.Frame(self.tab1)
        output_frame.pack(pady=20)

        # Label - –º–µ—Ç–∫–∞ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å"
        result_label = tk.Label(output_frame, text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:",
                                font=("Arial", 12, "bold"))
        result_label.pack()

        # Entry - –ø–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è (–º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)
        self.password_entry = tk.Entry(output_frame, font=("Arial", 14),
                                       width=30, justify='center', state='readonly')
        self.password_entry.pack(pady=10)

        # === –ü–û–õ–ó–£–ù–û–ö –î–õ–ò–ù–´ –ü–ê–†–û–õ–Ø ===
        length_frame = tk.Frame(self.tab1)
        length_frame.pack(pady=15)

        # –º–µ—Ç–∫–∞ –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–∞
        length_label = tk.Label(length_frame, text="–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è:", font=("Arial", 11))
        length_label.pack()

        # Scale - –ø–æ–ª–∑—É–Ω–æ–∫ (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
        self.length_scale = tk.Scale(length_frame, from_=8, to=32,
                                     orient="horizontal", length=300,
                                     font=("Arial", 10))
        self.length_scale.set(12) # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.length_scale.pack(pady=5)

        # –ì–∞–ª–æ—á–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤
        checks_frame = tk.Frame(self.tab1)
        checks_frame.pack(pady=15)

        # Checkbutton - —Ñ–ª–∞–∂–∫–∏ (–≥–∞–ª–æ—á–∫–∏)
        self.use_lower = tk.IntVar(value=1)
        self.use_upper = tk.IntVar(value=1)
        self.use_digits = tk.IntVar(value=1)
        self.use_symbols = tk.IntVar(value=1)

        # –§–ª–∞–∂–∫–∏
        lower_check = tk.Checkbutton(checks_frame, text="–ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä (abc)",
                                     variable=self.use_lower, font=("Arial", 10))
        lower_check.grid(row=0, column=0, sticky='w', padx=10)
        upper_check = tk.Checkbutton(checks_frame, text="–í–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä (ABC)",
                                     variable=self.use_upper, font=("Arial", 10))
        upper_check.grid(row=0, column=1, sticky='w', padx=10)
        digits_check = tk.Checkbutton(checks_frame, text="–¶–∏—Ñ—Ä—ã (123)",
                                     variable=self.use_digits, font=("Arial", 10))
        digits_check.grid(row=1, column=0, sticky='w', padx=10, pady=5)
        symbols_check = tk.Checkbutton(checks_frame, text="–°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (!@#)",
                                     variable=self.use_symbols, font=("Arial", 10))
        symbols_check.grid(row=1, column=1, sticky='w', padx=10, pady=5)

        # –ö–ù–û–ü–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò
        generate_btn = tk.Button(self.tab1, text="–°–≥–µ–Ω–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å",
                                 command=self.generate_password,
                                 font=("Arial", 12, "bold"),
                                 bg="#2196F3", fg='white',
                                 width=20, height=2)
        generate_btn.pack(pady=20)

    def generate_password(self):
        """–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            length = self.length_scale.get()

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–∞–ª–æ—á–µ–∫
            use_lower = self.use_lower.get()
            use_upper = self.use_upper.get()
            use_digits = self.use_digits.get()
            use_symbols = self.use_symbols.get()

            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
            filtered_dict = {}
            if use_lower:
                filtered_dict["lowerletters"] = self.SYMBOLS["lowerletters"]
            if use_upper:
                filtered_dict["upperletters"] = self.SYMBOLS["upperletters"]
            if use_digits:
                filtered_dict["digits"] = self.SYMBOLS["digits"]
            if use_symbols:
                filtered_dict["symbols"] = self.SYMBOLS["symbols"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            if not filtered_dict:
                settings = "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!"
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–∞—Ä–æ–ª—å
                settings = self.pass_generate(length, filtered_dict)
           

            # –í–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–∏—Å–∏, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º, —Å–Ω–æ–≤–∞ –¥–µ–ª–∞–µ–º readonly
            self.password_entry.config(state='normal')
            self.password_entry.delete(0, tk.END) # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            self.password_entry.insert(0, settings) # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            self.password_entry.config(state='readonly')
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            self.password_entry.config(state='normal')
            self.password_entry.delete(0, tk.END) # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            self.password_entry.insert(0, settings) # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            self.password_entry.config(state='readonly')

    def pass_generate(self, length, char_dict):
        password = []
        for category in char_dict:
            password.append(random.choice(char_dict[category]))

        while len(password) < length:
            category = random.choice(list(char_dict.keys()))
            password.append(random.choice(char_dict[category]))

        random.shuffle(password)

        return ''.join(password)

    def run(self):
        self.window.mainloop()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = SecurityToolkit()
    app.run()

        